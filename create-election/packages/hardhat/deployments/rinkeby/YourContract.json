{
  "address": "0x2F4b1CCdF42268E0Bc801Cb9a587B30742BFc10E",
  "abi": [
    {
      "inputs": [],
      "name": "ballotId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deployedBallots",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getsDeployedBallots",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "idToBallot",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newBallot",
      "outputs": [
        {
          "internalType": "contract PTBallot",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "candidateNames",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "candidateParties",
          "type": "bytes32[]"
        },
        {
          "internalType": "address",
          "name": "myAddress",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "amountOfDays",
          "type": "uint8"
        }
      ],
      "name": "startElec",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x22bef2d5f3cc244001a9c98ea9dd34c4803d67e3cc9bd8a866c930ac432a1f15",
  "receipt": {
    "to": null,
    "from": "0xF8af3f44ed70BC2E7EfE92df37B3F9Ba202F9398",
    "contractAddress": "0x2F4b1CCdF42268E0Bc801Cb9a587B30742BFc10E",
    "transactionIndex": 22,
    "gasUsed": "963605",
    "logsBloom": "0x
    "blockHash": "0xb1f9591fad00bd8984603b753c3607083f4c4740bb141de18da1c2dfca1b97fe",
    "transactionHash": "0x22bef2d5f3cc244001a9c98ea9dd34c4803d67e3cc9bd8a866c930ac432a1f15",
    "logs": [],
    "blockNumber": 10101559,
    "cumulativeGasUsed": "3807929",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b6d9fcb24af8331eba0ea2d6eef4fef5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ballotId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deployedBallots\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getsDeployedBallots\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToBallot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newBallot\",\"outputs\":[{\"internalType\":\"contract PTBallot\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"candidateNames\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"candidateParties\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"myAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"amountOfDays\",\"type\":\"uint8\"}],\"name\":\"startElec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Bella Kaneza\",\"details\":\"Functions are designed to limit gas cost and deploy a Ballot with maximum visibility and minimal issue\",\"kind\":\"dev\",\"methods\":{\"startElec(bytes32[],bytes32[],address,uint8)\":{\"details\":\"each parameter goes into the constructor of the PTBallot contract to deploy\",\"params\":{\"amountOfDays\":\"number of days ballot is open (limited from 0-255)\",\"candidateNames\":\"names of candidates\",\"candidateParties\":\"names of parties\",\"myAddress\":\"address set as the owner of the ballot\"}}},\"title\":\"YourContract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"startElec(bytes32[],bytes32[],address,uint8)\":{\"notice\":\"This function starts an election by deploying a new PTBallot contract\"}},\"notice\":\"You can use this control contract to create and view Ballots using the PTBallot contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YourContract.sol\":\"YourContract\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/YourContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n\\n/** \\n * @title PTBallot\\n * @dev Implements publically viewable party designation and time limitation to the standard delegate voting contract\\n */\\n\\ncontract PTBallot {\\n   \\n    struct Voter {\\n        uint weight; // weight is accumulated by delegation\\n        bool voted;  // if true, that person already voted\\n        address delegate; // person delegated to\\n        uint vote;   // index of the voted candidate\\n    }\\n\\n    struct Candidate {\\n        // If you can limit the length to a certain number of bytes, \\n        // always use one of bytes1 to bytes32 because they are much cheaper\\n        bytes32 name;   // short name (up to 32 bytes)\\n        bytes32 party; // party name (up to 32 bytes)\\n        uint voteCount; // number of accumulated votes\\n    }\\n\\n    address public chairperson;\\n\\n    uint public expirationDate;\\n\\n    mapping(address => Voter) private voters;\\n\\n    Candidate[] public candidates;\\n\\n    /** \\n     * @dev Create a new ballot to choose one of 'candidateNames'.\\n     * @dev Limits amountOfDays to uint8 (0-255) to limit the max ballot timelength.\\n     * @param candidateNames names of candidates\\n     * @param candidateParties names of parties\\n     * @param amountOfDays number of days ballot is open\\n    \\n     */\\n    constructor(bytes32[] memory candidateNames, bytes32[] memory candidateParties, address chairAddress, uint8 amountOfDays) {\\n        require(candidateNames.length == candidateParties.length);\\n        require(amountOfDays != 0);\\n        chairperson = chairAddress;\\n        voters[chairperson].weight = 1;\\n\\n        expirationDate = block.timestamp + (amountOfDays * 1 days);\\n\\n        for (uint i = 0; i < candidateNames.length; i++) {\\n            // 'Candidate({...})' creates a temporary\\n            // Candidate object and 'candidates.push(...)'\\n            // appends it to the end of 'candidates'.\\n            candidates.push(Candidate({\\n                name: candidateNames[i],\\n                party: candidateParties[i],\\n                voteCount: 0\\n            }));\\n        }\\n    }\\n\\n\\n    //@dev: modifier to restrict voting functions unless the ballot is within the expirationDate;\\n    modifier isNotExpired() \\n    {\\n        require(block.timestamp < expirationDate);\\n            _;\\n    }\\n        \\n    \\n    /** \\n     * @dev Give 'voter' the right to vote on this ballot. May only be called by 'chairperson'.\\n     * @param voter address of voter\\n     */\\n    function giveRightToVote(address voter) public isNotExpired {\\n        require(\\n            msg.sender == chairperson,\\n            \\\"Only chairperson can give right to vote.\\\"\\n        );\\n        require(\\n            !voters[voter].voted,\\n            \\\"The voter already voted.\\\"\\n        );\\n        require(voters[voter].weight == 0);\\n        voters[voter].weight = 1;\\n    }\\n\\n    /**\\n     * @dev Delegate your vote to the voter 'to'.\\n     * @param to address to which vote is delegated\\n     */\\n    function delegate(address to) public isNotExpired {\\n        Voter storage sender = voters[msg.sender];\\n        require(!sender.voted, \\\"You already voted.\\\");\\n        require(to != msg.sender, \\\"Self-delegation is disallowed.\\\");\\n\\n        while (voters[to].delegate != address(0)) {\\n            to = voters[to].delegate;\\n\\n            // We found a loop in the delegation, not allowed.\\n            require(to != msg.sender, \\\"Found loop in delegation.\\\");\\n        }\\n        sender.voted = true;\\n        sender.delegate = to;\\n        Voter storage delegate_ = voters[to];\\n        if (delegate_.voted) {\\n            // If the delegate already voted,\\n            // directly add to the number of votes\\n            candidates[delegate_.vote].voteCount += sender.weight;\\n        } else {\\n            // If the delegate did not vote yet,\\n            // add to her weight.\\n            delegate_.weight += sender.weight;\\n        }\\n    }\\n\\n    /**\\n     * @dev Give your vote (including votes delegated to you) to candidate 'candidates[candidate].name'.\\n     * @param candidate index of candidate in the candidates array\\n     */\\n    function vote(uint candidate) public isNotExpired {\\n        Voter storage sender = voters[msg.sender];\\n        require(sender.weight != 0, \\\"Has no right to vote\\\");\\n        require(!sender.voted, \\\"Already voted.\\\");\\n        sender.voted = true;\\n        sender.vote = candidate;\\n\\n        // If 'candidate' is out of the range of the array,\\n        // this will throw automatically and revert all\\n        // changes.\\n        candidates[candidate].voteCount += sender.weight;\\n    }\\n\\n    /** \\n     * @dev Computes the winning candidate taking all previous votes into account.\\n     * @return winningCandidate_ index of winning candidate in the candidates array\\n     */\\n    function winningCandidate() public view\\n            returns (uint winningCandidate_)\\n    {\\n        uint winningVoteCount = 0;\\n        for (uint p = 0; p < candidates.length; p++) {\\n            if (candidates[p].voteCount > winningVoteCount) {\\n                winningVoteCount = candidates[p].voteCount;\\n                winningCandidate_ = p;\\n            }\\n        }\\n    }\\n\\n    /** \\n     * @dev Calls winningCandidate() function to get the index of the winner contained in the candidates array and then\\n     * @return winnerName_ the name of the winner\\n     * @return winnerParty_ the party of the winner\\n     */\\n    function winnerDetails() public view\\n            returns (bytes32 winnerName_, bytes32 winnerParty_)\\n    {\\n        winnerName_ = candidates[winningCandidate()].name;\\n        winnerParty_ = candidates[winningCandidate()].party;\\n    }\\n    \\n\\n    /** \\n     * @dev Gets the time left for a ballot by subtracting the expiration date from the current date.\\n     * @return endDate_ the time left, in days, before the ballot expires\\n\\n     */\\n     function ballotEndDate() public view\\n            returns (uint endDate_)\\n    {\\n        endDate_ = expirationDate - block.timestamp;\\n    }\\n}\\n/** \\n * @title YourContract\\n   @author Bella Kaneza\\n   @notice You can use this control contract to create and view Ballots using the PTBallot contract\\n //@dev Functions are designed to limit gas cost and deploy a Ballot with maximum visibility and minimal issue\\n */\\n \\ncontract YourContract {\\n    PTBallot public newBallot;\\n    address[] public deployedBallots;\\n    mapping(uint256 => address) public idToBallot;\\n    uint256 public ballotId;\\n\\n        /**\\n     * @notice This function starts an election by deploying a new PTBallot contract\\n     * @dev each parameter goes into the constructor of the PTBallot contract to deploy\\n     * @param candidateNames names of candidates\\n     * @param candidateParties names of parties\\n     * @param myAddress address set as the owner of the ballot\\n     * @param amountOfDays number of days ballot is open (limited from 0-255)\\n     */\\n    function startElec (bytes32[] memory candidateNames, bytes32[] memory candidateParties, address myAddress, uint8 amountOfDays) public returns(uint256)  {\\n            newBallot = new PTBallot (candidateNames, candidateParties, myAddress, amountOfDays);\\n            deployedBallots.push(address(newBallot));\\n            ballotId += 1;\\n            idToBallot[ballotId] = address(newBallot);\\n            return ballotId;\\n        }\\n \\n//@dev function to get all of the Ballots that have been deployed\\n//@return deployedBallots list of all contract addresses of deployed Ballots\\n    function getsDeployedBallots() public view returns( address[] memory)\\n    {return deployedBallots;}\\n}\\n\",\"keccak256\":\"0x59f8ab41c214ca76b10453ead0b0f718c0eb924a5b578094dbae64025a529f03\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061107e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630b318ac6146100675780630e3e4a751461009757806380207a5c146100ac578063cdf74c3e146100cd578063cf00619e146100e0578063db4dff3814610109575b600080fd5b60005461007a906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61009f610112565b60405161008e9190610419565b6100bf6100ba366004610331565b610174565b60405190815260200161008e565b61007a6100db3660046103c7565b61025c565b61007a6100ee3660046103c7565b6002602052600090815260409020546001600160a01b031681565b6100bf60035481565b6060600180548060200260200160405190810160405280929190818152602001828054801561016a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161014c575b5050505050905090565b60008484848460405161018690610286565b6101939493929190610466565b604051809103906000f0801580156101af573d6000803e3d6000fd5b50600080546001600160a01b03929092166001600160a01b0319928316811782556001805480820182558184527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180549094169091179092556003805490919061021b9084906104b0565b9091555050600080546003805483526002602052604090922080546001600160a01b0319166001600160a01b03909216919091179055549050949350505050565b6001818154811061026c57600080fd5b6000918252602090912001546001600160a01b0316905081565b610b5e806104eb83390190565b600082601f8301126102a3578081fd5b8135602067ffffffffffffffff808311156102c0576102c06104d4565b8260051b604051601f19603f830116810181811084821117156102e5576102e56104d4565b60405284815283810192508684018288018501891015610303578687fd5b8692505b85831015610325578035845292840192600192909201918401610307565b50979650505050505050565b60008060008060808587031215610346578384fd5b843567ffffffffffffffff8082111561035d578586fd5b61036988838901610293565b9550602087013591508082111561037e578485fd5b5061038b87828801610293565b93505060408501356001600160a01b03811681146103a7578283fd5b9150606085013560ff811681146103bc578182fd5b939692955090935050565b6000602082840312156103d8578081fd5b5035919050565b6000815180845260208085019450808401835b8381101561040e578151875295820195908201906001016103f2565b509495945050505050565b6020808252825182820181905260009190848201906040850190845b8181101561045a5783516001600160a01b031683529284019291840191600101610435565b50909695505050505050565b60808152600061047960808301876103df565b828103602084015261048b81876103df565b6001600160a01b03959095166040840152505060ff9190911660609091015292915050565b600082198211156104cf57634e487b7160e01b81526011600452602481fd5b500190565b634e487b7160e01b600052604160045260246000fdfe60806040523480156200001157600080fd5b5060405162000b5e38038062000b5e833981016040819052620000349162000218565b82518451146200004357600080fd5b60ff81166200005157600080fd5b600080546001600160a01b0319166001600160a01b03841690811782558152600260205260409020600190556200008f60ff821662015180620002d4565b620000a09062ffffff1642620002b9565b60015560005b8451811015620001665760036040518060600160405280878481518110620000de57634e487b7160e01b600052603260045260246000fd5b602002602001015181526020018684815181106200010c57634e487b7160e01b600052603260045260246000fd5b602090810291909101810151825260009181018290528354600181810186559483529181902083516003909302019182558201519281019290925560400151600290910155806200015d8162000302565b915050620000a6565b50505050506200034c565b600082601f83011262000182578081fd5b815160206001600160401b0380831115620001a157620001a162000336565b8260051b604051601f19603f83011681018181108482111715620001c957620001c962000336565b60405284815283810192508684018288018501891015620001e8578687fd5b8692505b858310156200020c578051845292840192600192909201918401620001ec565b50979650505050505050565b600080600080608085870312156200022e578384fd5b84516001600160401b038082111562000245578586fd5b620002538883890162000171565b9550602087015191508082111562000269578485fd5b50620002788782880162000171565b604087015190945090506001600160a01b038116811462000297578283fd5b606086015190925060ff81168114620002ae578182fd5b939692955090935050565b60008219821115620002cf57620002cf62000320565b500190565b600062ffffff80831681851681830481118215151615620002f957620002f962000320565b02949350505050565b600060001982141562000319576200031962000320565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b610802806200035c6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638733902011610066578063873390201461011e5780638f620487146101345780639e7b8d611461013d578063d28178d714610150578063ed8bddeb1461015857600080fd5b80630121b93f146100985780632e4176cf146100ad5780633477ee2e146100dd5780635c19a95c1461010b575b600080fd5b6100ab6100a6366004610754565b610175565b005b6000546100c0906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100f06100eb366004610754565b610286565b604080519384526020840192909252908201526060016100d4565b6100ab610119366004610726565b6102b9565b6101266104d4565b6040519081526020016100d4565b61012660015481565b6100ab61014b366004610726565b6104e9565b61012661060e565b6101606106a7565b604080519283526020830191909152016100d4565b600154421061018357600080fd5b33600090815260026020526040902080546101dc5760405162461bcd60e51b8152602060048201526014602482015273486173206e6f20726967687420746f20766f746560601b60448201526064015b60405180910390fd5b600181015460ff16156102225760405162461bcd60e51b815260206004820152600e60248201526d20b63932b0b23c903b37ba32b21760911b60448201526064016101d3565b6001818101805460ff19169091179055600281018290558054600380548490811061025d57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060030201600201600082825461027d919061076c565b90915550505050565b6003818154811061029657600080fd5b600091825260209091206003909102018054600182015460029092015490925083565b60015442106102c757600080fd5b336000908152600260205260409020600181015460ff16156103205760405162461bcd60e51b81526020600482015260126024820152712cb7ba9030b63932b0b23c903b37ba32b21760711b60448201526064016101d3565b6001600160a01b0382163314156103795760405162461bcd60e51b815260206004820152601e60248201527f53656c662d64656c65676174696f6e20697320646973616c6c6f7765642e000060448201526064016101d3565b6001600160a01b038281166000908152600260205260409020600101546101009004161561041c576001600160a01b03918216600090815260026020526040902060010154610100900490911690338214156104175760405162461bcd60e51b815260206004820152601960248201527f466f756e64206c6f6f7020696e2064656c65676174696f6e2e0000000000000060448201526064016101d3565b610379565b600181810180546001600160a81b0319166101006001600160a01b03861690810291909117831790915560009081526002602052604090209081015460ff16156104b5578160000154600382600201548154811061048a57634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020160020160008282546104aa919061076c565b909155506104cf9050565b8154815482906000906104c990849061076c565b90915550505b505050565b6000426001546104e49190610784565b905090565b60015442106104f757600080fd5b6000546001600160a01b031633146105625760405162461bcd60e51b815260206004820152602860248201527f4f6e6c79206368616972706572736f6e2063616e2067697665207269676874206044820152673a37903b37ba329760c11b60648201526084016101d3565b6001600160a01b03811660009081526002602052604090206001015460ff16156105ce5760405162461bcd60e51b815260206004820152601860248201527f54686520766f74657220616c726561647920766f7465642e000000000000000060448201526064016101d3565b6001600160a01b038116600090815260026020526040902054156105f157600080fd5b6001600160a01b0316600090815260026020526040902060019055565b600080805b6003548110156106a257816003828154811061063f57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060030201600201541115610690576003818154811061067857634e487b7160e01b600052603260045260246000fd5b90600052602060002090600302016002015491508092505b8061069a8161079b565b915050610613565b505090565b60008060036106b461060e565b815481106106d257634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020160000154915060036106f061060e565b8154811061070e57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600302016001015490509091565b600060208284031215610737578081fd5b81356001600160a01b038116811461074d578182fd5b9392505050565b600060208284031215610765578081fd5b5035919050565b6000821982111561077f5761077f6107b6565b500190565b600082821015610796576107966107b6565b500390565b60006000198214156107af576107af6107b6565b5060010190565b634e487b7160e01b600052601160045260246000fdfea264697066735822122017325b6f2ab3429d0be66068daf38fbcdb306cef2f81eb9e28766e1c778f1ee464736f6c63430008040033a26469706673582212207f2619b629e959157fd625c4fea4e5c9c92b39c6db47998f9bb1c5023262be3064736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80630b318ac6146100675780630e3e4a751461009757806380207a5c146100ac578063cdf74c3e146100cd578063cf00619e146100e0578063db4dff3814610109575b600080fd5b60005461007a906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61009f610112565b60405161008e9190610419565b6100bf6100ba366004610331565b610174565b60405190815260200161008e565b61007a6100db3660046103c7565b61025c565b61007a6100ee3660046103c7565b6002602052600090815260409020546001600160a01b031681565b6100bf60035481565b6060600180548060200260200160405190810160405280929190818152602001828054801561016a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161014c575b5050505050905090565b60008484848460405161018690610286565b6101939493929190610466565b604051809103906000f0801580156101af573d6000803e3d6000fd5b50600080546001600160a01b03929092166001600160a01b0319928316811782556001805480820182558184527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180549094169091179092556003805490919061021b9084906104b0565b9091555050600080546003805483526002602052604090922080546001600160a01b0319166001600160a01b03909216919091179055549050949350505050565b6001818154811061026c57600080fd5b6000918252602090912001546001600160a01b0316905081565b610b5e806104eb83390190565b600082601f8301126102a3578081fd5b8135602067ffffffffffffffff808311156102c0576102c06104d4565b8260051b604051601f19603f830116810181811084821117156102e5576102e56104d4565b60405284815283810192508684018288018501891015610303578687fd5b8692505b85831015610325578035845292840192600192909201918401610307565b50979650505050505050565b60008060008060808587031215610346578384fd5b843567ffffffffffffffff8082111561035d578586fd5b61036988838901610293565b9550602087013591508082111561037e578485fd5b5061038b87828801610293565b93505060408501356001600160a01b03811681146103a7578283fd5b9150606085013560ff811681146103bc578182fd5b939692955090935050565b6000602082840312156103d8578081fd5b5035919050565b6000815180845260208085019450808401835b8381101561040e578151875295820195908201906001016103f2565b509495945050505050565b6020808252825182820181905260009190848201906040850190845b8181101561045a5783516001600160a01b031683529284019291840191600101610435565b50909695505050505050565b60808152600061047960808301876103df565b828103602084015261048b81876103df565b6001600160a01b03959095166040840152505060ff9190911660609091015292915050565b600082198211156104cf57634e487b7160e01b81526011600452602481fd5b500190565b634e487b7160e01b600052604160045260246000fdfe60806040523480156200001157600080fd5b5060405162000b5e38038062000b5e833981016040819052620000349162000218565b82518451146200004357600080fd5b60ff81166200005157600080fd5b600080546001600160a01b0319166001600160a01b03841690811782558152600260205260409020600190556200008f60ff821662015180620002d4565b620000a09062ffffff1642620002b9565b60015560005b8451811015620001665760036040518060600160405280878481518110620000de57634e487b7160e01b600052603260045260246000fd5b602002602001015181526020018684815181106200010c57634e487b7160e01b600052603260045260246000fd5b602090810291909101810151825260009181018290528354600181810186559483529181902083516003909302019182558201519281019290925560400151600290910155806200015d8162000302565b915050620000a6565b50505050506200034c565b600082601f83011262000182578081fd5b815160206001600160401b0380831115620001a157620001a162000336565b8260051b604051601f19603f83011681018181108482111715620001c957620001c962000336565b60405284815283810192508684018288018501891015620001e8578687fd5b8692505b858310156200020c578051845292840192600192909201918401620001ec565b50979650505050505050565b600080600080608085870312156200022e578384fd5b84516001600160401b038082111562000245578586fd5b620002538883890162000171565b9550602087015191508082111562000269578485fd5b50620002788782880162000171565b604087015190945090506001600160a01b038116811462000297578283fd5b606086015190925060ff81168114620002ae578182fd5b939692955090935050565b60008219821115620002cf57620002cf62000320565b500190565b600062ffffff80831681851681830481118215151615620002f957620002f962000320565b02949350505050565b600060001982141562000319576200031962000320565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b610802806200035c6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638733902011610066578063873390201461011e5780638f620487146101345780639e7b8d611461013d578063d28178d714610150578063ed8bddeb1461015857600080fd5b80630121b93f146100985780632e4176cf146100ad5780633477ee2e146100dd5780635c19a95c1461010b575b600080fd5b6100ab6100a6366004610754565b610175565b005b6000546100c0906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100f06100eb366004610754565b610286565b604080519384526020840192909252908201526060016100d4565b6100ab610119366004610726565b6102b9565b6101266104d4565b6040519081526020016100d4565b61012660015481565b6100ab61014b366004610726565b6104e9565b61012661060e565b6101606106a7565b604080519283526020830191909152016100d4565b600154421061018357600080fd5b33600090815260026020526040902080546101dc5760405162461bcd60e51b8152602060048201526014602482015273486173206e6f20726967687420746f20766f746560601b60448201526064015b60405180910390fd5b600181015460ff16156102225760405162461bcd60e51b815260206004820152600e60248201526d20b63932b0b23c903b37ba32b21760911b60448201526064016101d3565b6001818101805460ff19169091179055600281018290558054600380548490811061025d57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060030201600201600082825461027d919061076c565b90915550505050565b6003818154811061029657600080fd5b600091825260209091206003909102018054600182015460029092015490925083565b60015442106102c757600080fd5b336000908152600260205260409020600181015460ff16156103205760405162461bcd60e51b81526020600482015260126024820152712cb7ba9030b63932b0b23c903b37ba32b21760711b60448201526064016101d3565b6001600160a01b0382163314156103795760405162461bcd60e51b815260206004820152601e60248201527f53656c662d64656c65676174696f6e20697320646973616c6c6f7765642e000060448201526064016101d3565b6001600160a01b038281166000908152600260205260409020600101546101009004161561041c576001600160a01b03918216600090815260026020526040902060010154610100900490911690338214156104175760405162461bcd60e51b815260206004820152601960248201527f466f756e64206c6f6f7020696e2064656c65676174696f6e2e0000000000000060448201526064016101d3565b610379565b600181810180546001600160a81b0319166101006001600160a01b03861690810291909117831790915560009081526002602052604090209081015460ff16156104b5578160000154600382600201548154811061048a57634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020160020160008282546104aa919061076c565b909155506104cf9050565b8154815482906000906104c990849061076c565b90915550505b505050565b6000426001546104e49190610784565b905090565b60015442106104f757600080fd5b6000546001600160a01b031633146105625760405162461bcd60e51b815260206004820152602860248201527f4f6e6c79206368616972706572736f6e2063616e2067697665207269676874206044820152673a37903b37ba329760c11b60648201526084016101d3565b6001600160a01b03811660009081526002602052604090206001015460ff16156105ce5760405162461bcd60e51b815260206004820152601860248201527f54686520766f74657220616c726561647920766f7465642e000000000000000060448201526064016101d3565b6001600160a01b038116600090815260026020526040902054156105f157600080fd5b6001600160a01b0316600090815260026020526040902060019055565b600080805b6003548110156106a257816003828154811061063f57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060030201600201541115610690576003818154811061067857634e487b7160e01b600052603260045260246000fd5b90600052602060002090600302016002015491508092505b8061069a8161079b565b915050610613565b505090565b60008060036106b461060e565b815481106106d257634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020160000154915060036106f061060e565b8154811061070e57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600302016001015490509091565b600060208284031215610737578081fd5b81356001600160a01b038116811461074d578182fd5b9392505050565b600060208284031215610765578081fd5b5035919050565b6000821982111561077f5761077f6107b6565b500190565b600082821015610796576107966107b6565b500390565b60006000198214156107af576107af6107b6565b5060010190565b634e487b7160e01b600052601160045260246000fdfea264697066735822122017325b6f2ab3429d0be66068daf38fbcdb306cef2f81eb9e28766e1c778f1ee464736f6c63430008040033a26469706673582212207f2619b629e959157fd625c4fea4e5c9c92b39c6db47998f9bb1c5023262be3064736f6c63430008040033",
  "devdoc": {
    "author": "Bella Kaneza",
    "details": "Functions are designed to limit gas cost and deploy a Ballot with maximum visibility and minimal issue",
    "kind": "dev",
    "methods": {
      "startElec(bytes32[],bytes32[],address,uint8)": {
        "details": "each parameter goes into the constructor of the PTBallot contract to deploy",
        "params": {
          "amountOfDays": "number of days ballot is open (limited from 0-255)",
          "candidateNames": "names of candidates",
          "candidateParties": "names of parties",
          "myAddress": "address set as the owner of the ballot"
        }
      }
    },
    "title": "YourContract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "startElec(bytes32[],bytes32[],address,uint8)": {
        "notice": "This function starts an election by deploying a new PTBallot contract"
      }
    },
    "notice": "You can use this control contract to create and view Ballots using the PTBallot contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 398,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "newBallot",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(PTBallot)394"
      },
      {
        "astId": 401,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "deployedBallots",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 405,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "idToBallot",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 407,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "ballotId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(PTBallot)394": {
        "encoding": "inplace",
        "label": "contract PTBallot",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}